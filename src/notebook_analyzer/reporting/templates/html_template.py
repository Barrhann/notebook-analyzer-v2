"""
HTML Report Template.

This module provides the HTML template structure and generation functionality
for notebook analysis reports.

Created by: Barrhann
Created on: 2025-02-17
Last Updated: 2025-02-17 01:35:25
"""

from typing import Dict, Any, List
from jinja2 import Template
import json


class HTMLTemplate:
    """
    HTML template generator for notebook analysis reports.
    
    This class handles the creation and rendering of HTML reports
    using Jinja2 templates and custom styling.
    """

    def __init__(self):
        """Initialize the HTML template generator."""
        self.base_template = self._get_base_template()
        self.chart_templates = self._get_chart_templates()
        self.style_definitions = self._get_style_definitions()

    def render(self, report_data: Dict[str, Any]) -> str:
        """
        Render the report data into HTML format.

        Args:
            report_data (Dict[str, Any]): The report data to render

        Returns:
            str: Rendered HTML content
        """
        template = Template(self.base_template)
        return template.render(
            report=report_data,
            styles=self.style_definitions,
            charts=self.chart_templates
        )

    def _get_base_template(self) -> str:
        """
        Get the base HTML template structure.

        Returns:
            str: Base HTML template
        """
        return """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ report.title }}</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        {{ styles.base }}
        {{ styles.components }}
        {{ styles.charts }}
        {{ styles.responsive }}
    </style>
</head>
<body>
    <div class="report-container">
        <header class="report-header">
            <h1>{{ report.title }}</h1>
            <div class="report-meta">
                <p>Generated: {{ report.timestamp }}</p>
                <p>Overall Score: {{ report.overall_score }}/100</p>
            </div>
        </header>

        <nav class="report-nav">
            <ul>
                {% for section in report.sections %}
                <li><a href="#section-{{ loop.index }}">{{ section.title }}</a></li>
                {% endfor %}
            </ul>
        </nav>

        <main class="report-content">
            {% for section in report.sections %}
            <section id="section-{{ loop.index }}" class="report-section">
                <h2>{{ section.title }}</h2>
                
                {% if section.charts %}
                <div class="charts-container">
                    {% for chart in section.charts %}
                    <div class="chart-wrapper">
                        {{ charts[chart.type](chart) | safe }}
                    </div>
                    {% endfor %}
                </div>
                {% endif %}

                <div class="content-wrapper">
                    {{ section.content | safe }}
                </div>

                {% if section.findings %}
                <div class="findings-container">
                    <h3>Key Findings</h3>
                    <ul>
                        {% for finding in section.findings %}
                        <li>{{ finding }}</li>
                        {% endfor %}
                    </ul>
                </div>
                {% endif %}

                {% if section.suggestions %}
                <div class="suggestions-container">
                    <h3>Suggestions</h3>
                    <ul>
                        {% for suggestion in section.suggestions %}
                        <li>{{ suggestion }}</li>
                        {% endfor %}
                    </ul>
                </div>
                {% endif %}
            </section>
            {% endfor %}
        </main>

        <footer class="report-footer">
            <p>Generated by Notebook Analyzer v{{ report.version }}</p>
        </footer>
    </div>
</body>
</html>
"""

    def _get_chart_templates(self) -> Dict[str, callable]:
        """
        Get the chart rendering templates.

        Returns:
            Dict[str, callable]: Chart type to template mapping
        """
        return {
            'bar': self._render_bar_chart,
            'line': self._render_line_chart,
            'pie': self._render_pie_chart,
            'radar': self._render_radar_chart,
            'heatmap': self._render_heatmap,
            'histogram': self._render_histogram,
            'network': self._render_network_graph
        }

    def _get_style_definitions(self) -> Dict[str, str]:
        """
        Get CSS style definitions for the report.

        Returns:
            Dict[str, str]: Style definitions by category
        """
        return {
            'base': """
                :root {
                    --primary-color: #2c3e50;
                    --secondary-color: #3498db;
                    --accent-color: #e74c3c;
                    --text-color: #333;
                    --background-color: #f5f6fa;
                }

                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    line-height: 1.6;
                    color: var(--text-color);
                    background: var(--background-color);
                    margin: 0;
                    padding: 0;
                }
            """,
            'components': """
                .report-container {
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 2rem;
                }

                .report-header {
                    background: var(--primary-color);
                    color: white;
                    padding: 2rem;
                    border-radius: 8px;
                    margin-bottom: 2rem;
                }

                .report-section {
                    background: white;
                    padding: 2rem;
                    border-radius: 8px;
                    margin-bottom: 2rem;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }
            """,
            'charts': """
                .charts-container {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 2rem;
                    margin: 2rem 0;
                }

                .chart-wrapper {
                    background: white;
                    padding: 1rem;
                    border-radius: 8px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }
            """,
            'responsive': """
                @media (max-width: 768px) {
                    .report-container {
                        padding: 1rem;
                    }

                    .charts-container {
                        grid-template-columns: 1fr;
                    }
                }
            """
        }

    def _render_bar_chart(self, chart_data: Dict[str, Any]) -> str:
        """Render a bar chart."""
        return f"""
        <div id="chart-{chart_data['id']}" class="chart"></div>
        <script>
            Plotly.newPlot('chart-{chart_data['id']}', [{
                'x': {json.dumps(list(chart_data['data'].keys()))},
                'y': {json.dumps(list(chart_data['data'].values()))},
                'type': 'bar'
            }], {{
                'title': '{chart_data.get('title', '')}'
            }});
        </script>
        """

    def _render_line_chart(self, chart_data: Dict[str, Any]) -> str:
        """Render a line chart."""
        return f"""
        <div id="chart-{chart_data['id']}" class="chart"></div>
        <script>
            Plotly.newPlot('chart-{chart_data['id']}', [{
                'x': {json.dumps(chart_data['x'])},
                'y': {json.dumps(chart_data['y'])},
                'type': 'scatter',
                'mode': 'lines+markers'
            }], {{
                'title': '{chart_data.get('title', '')}'
            }});
        </script>
        """

    def _render_pie_chart(self, chart_data: Dict[str, Any]) -> str:
        """Render a pie chart."""
        return f"""
        <div id="chart-{chart_data['id']}" class="chart"></div>
        <script>
            Plotly.newPlot('chart-{chart_data['id']}', [{
                'values': {json.dumps(list(chart_data['data'].values()))},
                'labels': {json.dumps(list(chart_data['data'].keys()))},
                'type': 'pie'
            }], {{
                'title': '{chart_data.get('title', '')}'
            }});
        </script>
        """

    def _render_radar_chart(self, chart_data: Dict[str, Any]) -> str:
        """Render a radar chart."""
        return f"""
        <div id="chart-{chart_data['id']}" class="chart"></div>
        <script>
            Plotly.newPlot('chart-{chart_data['id']}', [{
                'r': {json.dumps(list(chart_data['data'].values()))},
                'theta': {json.dumps(list(chart_data['data'].keys()))},
                'type': 'scatterpolar',
                'fill': 'toself'
            }], {{
                'title': '{chart_data.get('title', '')}'
            }});
        </script>
        """

    def _render_heatmap(self, chart_data: Dict[str, Any]) -> str:
        """Render a heatmap."""
        return f"""
        <div id="chart-{chart_data['id']}" class="chart"></div>
        <script>
            Plotly.newPlot('chart-{chart_data['id']}', [{
                'z': {json.dumps(chart_data['data'])},
                'type': 'heatmap'
            }], {{
                'title': '{chart_data.get('title', '')}'
            }});
        </script>
        """

    def _render_histogram(self, chart_data: Dict[str, Any]) -> str:
        """Render a histogram."""
        return f"""
        <div id="chart-{chart_data['id']}" class="chart"></div>
        <script>
            Plotly.newPlot('chart-{chart_data['id']}', [{
                'x': {json.dumps(chart_data['data'])},
                'type': 'histogram'
            }], {{
                'title': '{chart_data.get('title', '')}'
            }});
        </script>
        """

    def _render_network_graph(self, chart_data: Dict[str, Any]) -> str:
        """Render a network graph."""
        return f"""
        <div id="chart-{chart_data['id']}" class="chart"></div>
        <script>
            Plotly.newPlot('chart-{chart_data['id']}', [{
                'nodes': {json.dumps(chart_data['nodes'])},
                'edges': {json.dumps(chart_data['edges'])},
                'type': 'network'
            }], {{
                'title': '{chart_data.get('title', '')}'
            }});
        </script>
        """
